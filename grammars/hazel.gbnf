root ::= exp

ws ::= [ \t\n]+

### Expressions

exp ::= sequence-exp

sequence-exp ::= tuple-exp (";" ws tuple-exp)*

tuple-exp ::= cons-exp ("," ws cons-exp)*

cons-exp ::= binary-exp ("::" binary-exp)*

binary-exp ::= unary-exp (ws binary-op ws unary-exp)*

unary-exp ::= unary-op* function-app-exp

function-app-exp ::= primary-exp ("(" exp ")")*

primary-exp ::= bool |
    integer |
    float |
    string |
    variable |
    "()" |
    "[]" |
    "?" |
    constructor |
    constructor-app |
    parenthesized-exp |
    list-exp |
    let-exp |
    if-exp |
    case-exp |
    test-exp |
    type-alias

constructor-app ::= constructor "(" exp ")"
parenthesized-exp ::= "(" exp ")"
list-exp ::= "[" exp ("," ws exp)* "]"
let-exp ::= "let" ws pat (":" ws typ)? ws "=" ws exp ws "in" ws exp
if-exp ::= "if" ws exp ws "then" ws exp ws "else" ws exp
case-exp ::= "case" ws exp (ws "|" ws pat ws "=>" ws exp)+ ws "end"
test-exp ::= "test" ws exp ws "end"
type-alias ::= "type" ws type-variable ws "=" ws typ ws "in" ws exp

type-variable ::= [A-Z][A-Za-z0-9_]*
constructor ::= [A-Z][A-Za-z0-9_]*
variable ::= [a-z][A-Za-z0-9_]*
bool ::= "true" | "false"
integer ::= [0-9]+
float ::= [0-9]* "." [0-9]+
string ::= "\"" [^"]* "\""

unary-op ::= "-" | "!"
binary-op-int ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "==" | "!="
binary-op-float ::= "+." | "-." | "*." | "/." | "<." | ">." | "<=." | ">=." | "==." | "!=."
binary-op-string ::= "$==" | "@"
binary-op ::= binary-op-int | binary-op-float | binary-op-string

### Patterns

pat ::= type-ascription-pat

type-ascription-pat ::= tuple-pat (":" ws typ)*

tuple-pat ::= cons-pat ("," ws cons-pat)*

cons-pat ::= primary-pat ("::" primary-pat)*

primary-pat ::=
    bool |
    integer |
    float |
    string |
    variable |
    "()" |
    "[]" |
    "?" |
    "_" |
    constructor |
    constructor-app-pat |
    parenthesized-pat |
    list-pat

constructor-app-pat ::= constructor "(" pat ")"
parenthesized-pat ::= "(" pat ")"
list-pat ::= "[" pat ("," ws pat)* "]"

### Types

typ ::= arrow-typ

arrow-typ ::= tuple-typ (ws "->" ws tuple-typ)*

tuple-typ ::= primary-typ ("," ws primary-typ)*

primary-typ ::=
    "Unit" |
    "Int" |
    "Float" |
    "Bool" |
    "String" |
    type-variable |
    constructor-def (ws "+" ws constructor-def)+ |
    "?" |
    parenthesized-typ |
    list-typ

parenthesized-typ ::= "(" typ ")"
list-typ ::= "[" typ "]"
constructor-def ::= constructor | constructor "(" typ ")"
