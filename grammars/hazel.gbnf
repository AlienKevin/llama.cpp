root ::= exp

### Expressions

exp ::= sequence-exp

sequence-exp ::= tuple-exp (";" tuple-exp)*

tuple-exp ::= cons-exp ("," cons-exp)*

cons-exp ::= binary-exp ("::" binary-exp)*

binary-exp ::= unary-exp (binary-op unary-exp)*

unary-exp ::= unary-op* function-app-exp

function-app-exp ::= primary-exp ("(" exp ")")*

primary-exp ::= bool |
    integer |
    float |
    string |
    variable |
    "()" |
    "[]" |
    "?" |
    constructor |
    constructor-app |
    parenthesized-exp |
    list-exp |
    let-exp |
    if-exp |
    case-exp |
    test-exp |
    type-alias

constructor-app ::= constructor "(" exp ")"
parenthesized-exp ::= "(" exp ")"
list-exp ::= "[" exp ("," exp)* "]"
let-exp ::= "let " pat (":" typ)? "=" exp " in " exp
if-exp ::= "if " exp " then " exp " else " exp
case-exp ::= "case " exp ("|" pat "=>" exp)+ " end"
test-exp ::= "test " exp " end"
type-alias ::= "type " type-variable "=" typ " in " exp

type-variable ::= [A-Z][A-Za-z0-9_]*
constructor ::= [A-Z][A-Za-z0-9_]*
variable ::= [a-z][A-Za-z0-9_]*
bool ::= "true" | "false"
integer ::= [0-9]+
float ::= [0-9]* "." [0-9]+
string ::= "\"" [^"]* "\""

unary-op ::= "-" | "!"
binary-op-int ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "==" | "!="
binary-op-float ::= "+." | "-." | "*." | "/." | "<." | ">." | "<=." | ">=." | "==." | "!=."
binary-op-string ::= "$==" | "@"
binary-op ::= binary-op-int | binary-op-float | binary-op-string

### Patterns

pat ::= type-ascription-pat

type-ascription-pat ::= tuple-pat (":" typ)*

tuple-pat ::= cons-pat ("," cons-pat)*

cons-pat ::= primary-pat ("::" primary-pat)*

primary-pat ::=
    bool |
    integer |
    float |
    string |
    variable |
    "()" |
    "[]" |
    "?" |
    "_" |
    constructor |
    constructor-app-pat |
    parenthesized-pat |
    list-pat

constructor-app-pat ::= constructor "(" pat ")"
parenthesized-pat ::= "(" pat ")"
list-pat ::= "[" pat ("," pat)* "]"

### Types

typ ::= arrow-typ

arrow-typ ::= tuple-typ ("->" tuple-typ)*

tuple-typ ::= primary-typ ("," primary-typ)*

primary-typ ::=
    "Unit" |
    "Int" |
    "Float" |
    "Bool" |
    "String" |
    type-variable |
    constructor-def ("+" constructor-def)+ |
    "?" |
    parenthesized-typ |
    list-typ

parenthesized-typ ::= "(" typ ")"
list-typ ::= "[" typ "]"
constructor-def ::= constructor | constructor "(" typ ")"
